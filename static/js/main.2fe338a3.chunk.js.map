{"version":3,"sources":["Components/AddStockModal.js","Components/StocksTable.js","Components/PerfGraphModal.js","Components/Portfolio.js","Components/PortfolioContainer.js","App.js","index.js"],"names":["AddStockModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setTicker","e","target","value","toUpperCase","setState","ticker","setAmount","state","amount","parseInt","addStock","length","message","info","onAdd","onClose","onKeyPress","test","key","preventDefault","inputIsValid","_this2","show","react_default","a","createElement","modal","title","visible","onOk","okText","onCancel","cancelText","input","className","placeholder","onInput","autoFocus","type","min","Component","columns","dataIndex","width","StocksTable","createDataObject","stocks","exchangeRate","currency","map","element","index","stock","quantity","individualValue","closeValue","toFixed","totalValue","data","id","table","rowSelection","onChange","keys","handleChecked","selectedRowKeys","dataSource","size","scroll","y","pagination","defaultExpandAllRows","RangePicker","DatePicker","dateFormat","PerfGraphModal","generateChartDataList","startDate","endDate","historyLength","stocksLength","i","date","isDateInRange","obj","j","push","generateChartDataKeys","color","handleOk","dates","minDate","moment","startAndEndDates","maxDate","concat","format","createEuropeanDateString","toDate","getDate","getMonth","getFullYear","createDateObject","dateString","parts","split","Date","start","end","d","dataKeys","footer","ResponsiveContainer","height","LineChart","item","Line","dataKey","dot","unit","stroke","CartesianGrid","XAxis","YAxis","Tooltip","Legend","row","justify","defaultValue","showTime","hideDisabledOptions","ranges","Whole History","This Month","startOf","endOf","Portfolio","console","log","url","fetch","then","response","json","error","dailyValues","close","parseFloat","history","createEuropeanDate","updateStocks","catch","alreadyExists","forEach","reverse","prevState","toConsumableArray","checked","generateRandomHexadecimalColor","calcNewPortfolioValue","stocksArr","showAddStockModal","showPerfGraphModal","handleCheckedStocks","indicies","updatedStockArr","_","includes","anyStocksChecked","getSelectedRows","rows","deleteStocks","updatedStocks","filter","handleCurrencyChange","euroExchangeRate","currentExchangeRate","getStartAndEndHistoryDates","len","Math","random","toString","slice","build_default","parent","prefix","blacklist","card","name","style","extra","popconfirm","onConfirm","onRemove","es_button","icon","AddStockModal_AddStockModal","PerfGraphModal_PerfGraphModal","es_radio","Group","StocksTable_StocksTable","onClick","disabled","PortfolioContainer","createNewPortfolio","portfolios","portfolioName","prompt","portfolio","v4","exists","alert","removePortfolio","portfolioId","newArr","getCurrencyExchangeRates","rates","USD","gutter","xs","sm","md","lg","xl","align","col","Portfolio_Portfolio","React","Header","Layout","Content","App","layout","PortfolioContainer_PortfolioContainer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2fe338a3.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Modal, Input, message} from 'antd'\r\n\r\nexport default class AddStockModal extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tticker : \"\",\r\n\t\t\tamount : \"\",\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (!this.props.show) {\r\n\t\t\treturn null\r\n\t\t}\r\n\t\treturn(\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<Modal\r\n\t\t\t\t\ttitle=\"Add Stock\"\r\n\t\t\t\t\tvisible={this.props.show}\r\n\t\t\t\t\tonOk={this.addStock}\r\n\t\t\t\t\tokText=\"Add\"\r\n\t\t\t\t\tonCancel={this.props.onClose}\r\n\t\t\t\t\tcancelText=\"Cancel\"\r\n\r\n\t\t\t\t>\r\n\r\n\t\t\t\t<Input \r\n\t\t\t\t\tclassName=\"add-modal-input\" \r\n\t\t\t\t\tplaceholder=\"Enter stock symbol\" \r\n\t\t\t\t\tonInput={e => this.setTicker(e)} \r\n\t\t\t\t\tautoFocus \r\n\t\t\t\t\t/>\r\n\t\t\t\t<Input \r\n\t\t\t\t\tclassName=\"add-modal-input\" \r\n\t\t\t\t\tplaceholder=\"Enter amount\"\r\n\t\t\t\t\tonInput={e => this.setAmount(e)}\r\n\t\t\t\t\tonKeyPress={e => this.onKeyPress(e)}\r\n\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\tmin=\"1\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\r\n\t\t\t\t</Modal>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tsetTicker = (e) => {\r\n\t\te.target.value = e.target.value.toUpperCase() \r\n\t\tthis.setState({\r\n\t\t\tticker : e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\tsetAmount = (e) => {\r\n\t\t//Input can't start with 0\r\n\t\tif(this.state.amount === \"\" && parseInt(e.target.value) === 0) {\r\n\t\t\te.target.value = \"\"\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tamount : e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\taddStock = () => {\r\n\t\tif(this.state.ticker === \"\" || this.state.amount === \"\"){\r\n\t\t\t//alert(\"Please input the ticker and amount\")\r\n\t\t\tmessage.info(\"Please input the ticker and amount\")\r\n\t\t\treturn\r\n\t\t}\r\n\t\t\r\n\t\tif(this.state.ticker.length < 3 || this.state.ticker.length > 4 ) {\r\n\t\t\tmessage.info(\"Please input a 3 or 4 letter stock ticker\")\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.props.onAdd(this.state.ticker.toUpperCase(), parseInt(this.state.amount))\r\n\t\tthis.props.onClose()\r\n\t\t\r\n\t\t// Reset the ticker and amount values\r\n\t\tthis.setState({\r\n\t\t\tticker: \"\",\r\n\t\t\tamount: \"\",\r\n\t\t\t})\r\n\r\n\t}\r\n\r\n\t//Only 0-9 are valid input keys\r\n\tonKeyPress = e => {\r\n\t\tlet valid = /^\\d*$/.test(e.key);\r\n\t\tif(!valid) e.preventDefault()\r\n\t\t\r\n\t}\r\n\r\n\tinputIsValid = () => {\r\n\t\tif(this.state.ticker === \"\" || this.state.amount === \"\"){\r\n\t\t\tmessage.info(\"Please input the ticker and amount\")\r\n\t\t\treturn false\r\n\t\t}    \r\n\t}\r\n\r\n}\r\n\r\nAddStockModal.propTypes = {\r\n\tonClose: PropTypes.func.isRequired,\r\n\tonAdd: PropTypes.func.isRequired,\r\n\tshow: PropTypes.bool.isRequired\r\n}","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Table} from 'antd'\r\n\r\n//Table headers\r\nconst columns = [{\r\n\ttitle: \"Stock\",\r\n\tdataIndex: 'stock',\r\n\twidth:100,\r\n}, {\r\n\ttitle: \"Quantity\",\r\n\tdataIndex: 'quantity',\r\n\twidth:100\r\n}, {\r\n\ttitle: \"Value\",\r\n\tdataIndex: \"individualValue\",\r\n\twidth: 150\r\n},{\r\n\ttitle: \"Total Value\",\r\n\tdataIndex: 'totalValue'\r\n}]\r\n\r\n\r\nexport default class StocksTable extends Component {\r\n\r\n\trender() {\r\n\t\tlet data = this.createDataObject(this.props.stocks, this.props.exchangeRate, this.props.currency)\r\n\r\n\t\treturn(\r\n\t\t\t<div id=\"table-container\">\r\n\r\n\t\t\t\t<Table rowSelection={\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tonChange: (keys) => {\t\r\n\t\t\t\t\t\t\tthis.props.handleChecked(keys)\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tselectedRowKeys: this.props.selectedRowKeys,\r\n\t\t\t\t\t}\r\n\t\t\t\t} \r\n\t\t\t\t\tcolumns={columns} \r\n\t\t\t\t\tdataSource={data}\r\n\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\tscroll={{ y: 150 }}\r\n\t\t\t\t\tpagination={false}\r\n\t\t\t\t\tdefaultExpandAllRows={true}>\r\n\t\t\t\t</Table>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\t//Create data source object for Ant Design table component\r\n\tcreateDataObject = (stocks, exchangeRate, currency) => {\r\n\t\t//ticker, amount, value  \r\n\t\treturn stocks.map((element, index) => {\r\n\t\t\treturn {\r\n\t\t\t\tstock: element.ticker,\r\n\t\t\t\tquantity: element.amount,\r\n\t\t\t\tindividualValue: (element.closeValue * exchangeRate).toFixed(2) + currency,\r\n\t\t\t\ttotalValue: (element.value * exchangeRate).toFixed(2) + currency,\r\n\t\t\t\tkey: index\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n\r\nStocksTable.propTypes = {\r\n\texchangeRate : PropTypes.number.isRequired,\r\n\tcurrency : PropTypes.string.isRequired,\r\n\tstocks: PropTypes.array.isRequired,\r\n\thandleChecked : PropTypes.func.isRequired,\r\n\tselectedRowKeys: PropTypes.array.isRequired\r\n}","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer} from 'recharts'\r\nimport {Modal, DatePicker, message, Row} from 'antd'\r\nimport moment from 'moment';\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst dateFormat = 'DD/MM/YYYY'\r\n\r\nexport default class PerfGraphModal extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tstartDate : \"\",\r\n\t\t\tendDate: \"\",\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\t\r\n\t\tif (!this.props.show) {\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\t//Every stock history has same lenght, so just picking first one\r\n\t\tlet historySize = this.props.stocks[0]['history'].length\r\n\t\tlet startDate, endDate\r\n\t\t\r\n\t\t//Use start and end sent via props until user has given own start and end dates\r\n\t\tif(this.state.startDate === \"\" && this.state.endDate === \"\") {\r\n\t\t\tstartDate = this.props.startAndEndDates[0]\r\n\t\t\tendDate = this.props.startAndEndDates[1]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartDate = this.state.startDate\r\n\t\t\tendDate = this.state.endDate\r\n\t\t}\r\n\r\n\t\t//Required for the Rechart library\r\n\t\tlet data = this.generateChartDataList(this.props.stocks, startDate, endDate)\r\n\t\tlet dataKeys = this.generateChartDataKeys(this.props.stocks)\r\n\r\n\t\treturn(\r\n\t\t\t<div>\r\n\r\n\t\t\t\t<Modal\r\n\t\t\t\t\ttitle=\"Performance Graph\"\r\n\t\t\t\t\tvisible={this.props.show}\r\n\t\t\t\t\tonOk={this.props.onClose}\r\n\t\t\t\t\tonCancel={this.props.onClose}\r\n\t\t\t\t\twidth={\"80%\"}\r\n\t\t\t\t\tfooter={null}\r\n\t\t\t\t>\r\n\r\n\t\t\t\t<ResponsiveContainer width=\"100%\" height={600}>\r\n\t\t\t\t\t<LineChart data={data}>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdataKeys.map((item, index) => (\r\n\t\t\t\t\t\t\t\t<Line\r\n\t\t\t\t\t\t\t\t\ttype=\"monotone\"\r\n\t\t\t\t\t\t\t\t\tdataKey={item.ticker}\r\n\t\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\t\tdot={false}\r\n\t\t\t\t\t\t\t\t\tunit={this.props.currency}\r\n\t\t\t\t\t\t\t\t\tstroke={item.color}>\r\n\t\t\t\t\t\t\t\t</Line>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<CartesianGrid stroke=\"#ccc\" />\r\n\t\t\t\t\t\t<XAxis dataKey=\"date\" />\r\n\t\t\t\t\t\t<YAxis />\r\n\t\t\t\t\t\t<Tooltip/>\r\n\t\t\t\t\t\t<Legend />\r\n\t\t\t\t\t</LineChart>\r\n\t\t\t\t</ResponsiveContainer>\r\n\t\t\t\t\r\n\t\t\t\t{/* Date picker for selecting start and end date */}\t\r\n\t\t\t\t<Row id =\"date-picker-container\" type=\"flex\" justify=\"center\">\r\n\t\t\t\t<RangePicker\r\n\t\t\t\t\tdefaultValue={[moment(startDate, dateFormat), moment(endDate, dateFormat)]}\r\n\t\t\t\t\tformat={dateFormat}\r\n\t\t\t\t\tshowTime={{hideDisabledOptions: true}}\r\n\t\t\t\t\tonOk={this.handleOk}\r\n\t\t\t\t\tranges={{\r\n\t\t\t\t\t\t\t'Whole History': [moment(this.props.startAndEndDates[0], dateFormat), \r\n\t\t\t\t\t\t\t\t\t\t\tmoment(this.props.startAndEndDates[1], dateFormat)],\r\n\t\t\t\t\t\t\t'This Month': [moment().startOf('month'), moment().endOf('month')]\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t</Row>\r\n\r\n\t\t\t\t</Modal>\r\n\t\t\t</div>\r\n\r\n\t\t)\r\n\t}\r\n\r\n\t// Data object for chart library\r\n\tgenerateChartDataList = (stocks, startDate, endDate) => {\r\n\t\t //all stock historys are the same length, pick one\r\n\t\tlet historyLength = stocks[0]['history'].length\r\n\t\tlet stocksLength = stocks.length\r\n\t\tlet exchangeRate = this.props.exchangeRate\r\n\t\tlet data = []\r\n\t\t\r\n\t\tfor(let i = 0; i < historyLength; i++) {\r\n\t\t\tlet date = stocks[0]['history'][i]['date']\r\n\t\t\tlet inRange = this.isDateInRange(date, startDate, endDate)\r\n\t\t\tif(!inRange) continue\r\n\r\n\t\t\tlet obj = {date: stocks[0]['history'][i]['date']}\r\n\t\t\tfor(let j = 0; j < stocksLength; j++) {\r\n\t\t\t\tobj[stocks[j].ticker] = (stocks[j]['history'][i]['value'] * exchangeRate).toFixed(2)\r\n\t\t\t}\r\n\t\t\tdata.push(obj)\r\n\t\t}\r\n\t\treturn data\r\n\t}\r\n\r\n\t//Data keys for the Rechart graph library\r\n\tgenerateChartDataKeys = (stocks) => {\r\n\t\treturn stocks.map(stock => {\r\n\t\t\treturn {\r\n\t\t\t\tticker: stock.ticker,\r\n\t\t\t\tcolor: stock.color,\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\r\n   //When user clicks ok after selecting start and end date\r\n\thandleOk = (dates) => {\r\n\t   //No history exists outside the min and max range\r\n\t   let minDate = moment(this.props.startAndEndDates[0], dateFormat)\r\n\t   let maxDate = moment(this.props.startAndEndDates[1], dateFormat)\r\n\r\n\t   //If no history is found\r\n\t   if(dates[1] < minDate || dates[0] > maxDate) {\r\n\t\t   message.info(\r\n\t\t\t   `No historical data found between ${dates[0].format('DD/MM/YYYY')} and ${dates[1].format('DD/MM/YYYY')}`\r\n\t\t\t)\r\n\t   }\r\n\r\n\t   this.setState(({\r\n\t\tstartDate: this.createEuropeanDateString(dates[0].toDate()),\r\n\t\tendDate: this.createEuropeanDateString(dates[1].toDate()),\r\n\t\t}))\r\n\t   \r\n   }\r\n\r\n   \tcreateEuropeanDateString = (date) => {\r\n\t\treturn date.getDate() + \"/\" + (date.getMonth() + 1) + \"/\"+date.getFullYear();\r\n\t}\r\n\r\n\tcreateDateObject = dateString => {\r\n\t\tlet parts = dateString.split(\"/\")\r\n\t\treturn new Date(parts[2], parts[1] - 1, parts[0])\r\n\t}\r\n\r\n\t//Used to filter out data when choosing custom start and end date\r\n\tisDateInRange = (date, start, end) => {\r\n\t\tlet d = this.createDateObject(date)\r\n\t\tlet startDate = this.createDateObject(start)\r\n\t\tlet endDate = this.createDateObject(end)\r\n\r\n\t\tif(d >= startDate && d <= endDate) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\treturn false\t \r\n\t}\r\n}\r\n\r\nPerfGraphModal.propTypes = {\r\n\tstocks: PropTypes.array.isRequired,\r\n\tonClose: PropTypes.func.isRequired,\r\n\tshow: PropTypes.bool.isRequired,\r\n\tcurrency: PropTypes.string.isRequired,\r\n\texchangeRate: PropTypes.number.isRequired,\r\n\tstartAndEndDates: PropTypes.array\r\n}","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport AddStockModal from './AddStockModal'\r\nimport StocksTable from './StocksTable'\r\nimport PerfGraphModal from './PerfGraphModal';\r\nimport {message, Card, Popconfirm, Button, Radio, Row, Col} from 'antd'\r\nimport SimpleStorage from \"react-simple-storage\";\r\n\r\n\r\n\r\nexport default class Portfolio extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tvalue: 0,\r\n\t\t\tstocks : [],\r\n\t\t\tcurrentExchangeRate: 1, //Stocks api returns value as USD by default\r\n\t\t\tcurrency: '$',\r\n\t\t\tshowAddStockModal: false,\t//Modals showing or not, default state false\r\n\t\t\tshowPerfGraphModal: false,\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\t\t\r\n\t\t\t<div className=\"portfolio\">\r\n\r\n\t\t\t{/*For local storage */}\r\n\t\t\t<SimpleStorage parent={this} prefix={this.props.id} blacklist={['showAddStockModal', 'showPerfGraphModal']} />\r\n\t\t\t<Card \r\n\t\t\t\tclassName=\"portfolio\"\r\n\t\t\t\ttitle={this.props.name}\r\n\t\t\t\tstyle={{ width: \"100%\" }}\r\n\t\t\t\textra={\r\n\t\t\t\t<Popconfirm title=\"Are you sure you want to delete the portfolio?\" \r\n\t\t\t\t\t\t\tokText=\"Yes\" \r\n\t\t\t\t\t\t\tcancelText=\"No\"\r\n\t\t\t\t\t\t\tonConfirm={() => {\r\n\t\t\t\t\t\t\t\tthis.props.onRemove(this.props.id)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t}>\r\n\t\t\t\t\t<Button icon=\"close-circle\" type=\"danger\" id=\"remove-portfolio-btn\">\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Popconfirm>}\t\r\n\t\t\t>\r\n\t\t\t\r\n\r\n\t\t\t\t\r\n\t\t\t\t{/* The modals. Hidden by default, and shows when buttons are pressed */}\r\n\t\t\t\t<AddStockModal \r\n\t\t\t\t\tshow={this.state.showAddStockModal} \r\n\t\t\t\t\tonClose={this.showAddStockModal} \r\n\t\t\t\t\tonAdd={this.addStock}>\r\n\t\t\t\t</AddStockModal>\r\n\t\t\t\t\r\n\t\t\t\t<PerfGraphModal\r\n\t\t\t\t\tstocks={this.state.stocks.filter(stock => stock.checked === true)}\r\n\t\t\t\t\tshow={this.state.showPerfGraphModal}\r\n\t\t\t\t\tonClose={this.showPerfGraphModal}\r\n\t\t\t\t\texchangeRate={this.state.currentExchangeRate}\r\n\t\t\t\t\tcurrency={this.state.currency}\r\n\t\t\t\t\tstartAndEndDates={this.getStartAndEndHistoryDates()}\r\n\t\t\t\t>\r\n\t\t\t\t</PerfGraphModal>\r\n\t\t\t\t\r\n\t\t\t\t{/* Currency selection */}\r\n\t\t\t\t<Radio.Group id=\"currency-selector\" value={this.state.currency} onChange={this.handleCurrencyChange}>\r\n\t\t\t\t\t<Radio value=\"$\">USD</Radio>\r\n\t\t\t\t\t<Radio value=\"€\">EUR</Radio>\r\n\t\t\t\t</Radio.Group>\r\n\t\t\t\t\r\n\t\t\t\t{/* Table display for the stock information */}\r\n\t\t\t\t<StocksTable\r\n\t\t\t\t\texchangeRate={this.state.currentExchangeRate}\r\n\t\t\t\t\tcurrency={this.state.currency}\r\n\t\t\t\t\tstocks={this.state.stocks}\r\n\t\t\t\t\thandleChecked={this.handleCheckedStocks}\r\n\t\t\t\t\tselectedRowKeys={this.getSelectedRows()}\r\n\t\t\t\t></StocksTable>\r\n\r\n\t\t\t\t{/* Display portfolio value */}\r\n\t\t\t\t<h3>{\"Portfolio value: \" + (this.state.value*this.state.currentExchangeRate).toFixed(2) + this.state.currency}</h3>\r\n\t\t\t\t\r\n\t\t\t\t{/* Container for all the buttons */}\r\n\t\t\t\t<div id=\"buttons-container\">\r\n\t\t\t\t\t<Button id=\"add-stock-btn\"\r\n\t\t\t\t\t\t\tonClick={this.showAddStockModal}\r\n\t\t\t\t\t\t\tdisabled={this.state.stocks.length >= 50}\r\n\t\t\t\t\t\t\t>Add Stock</Button>\r\n\t\t\t\t\t<Button id=\"perf-graph-btn\" onClick={this.showPerfGraphModal} \r\n\t\t\t\t\t\t\tdisabled={!this.anyStocksChecked()}>\r\n\t\t\t\t\t\t\tGraph Of Selected\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button id=\"delete-selected-btn\" onClick={this.deleteStocks}\r\n\t\t\t\t\t\t\tdisabled={!this.anyStocksChecked()}>\r\n\t\t\t\t\t\t\tRemove Selected\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</Card>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\taddStock = (ticker, amount) => {\r\n\t\t//debug purposes\t\r\n\t\tconsole.log(`ticker: ${ticker}   amount: ${amount}`);\r\n\r\n\t\tconst API_KEY = \"CH6O6Y963H07848Q\"\r\n\t\tlet url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${ticker}&apikey=${API_KEY}`\r\n\r\n\t\tfetch(url)\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn response.json()\r\n\r\n\t\t\t.then(json => {\r\n\t\t\t\t//Given ticker does not exist, return from func\r\n\t\t\t\tif('Error Message' in json) {\r\n\t\t\t\t\tmessage.error(`Ticker ${ticker} could not be found. Please give a valid ticker name.`)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Get current stock value\r\n\t\t\t\tlet dailyValues = json['Time Series (Daily)']\r\n\t\t\t\tlet close = parseFloat(dailyValues[Object.keys(dailyValues)[0]]['4. close']);\t\r\n\r\n\t\t\t\t//save historical data for performance graph\r\n\t\t\t\tlet history = []\r\n\t\t\t\tfor(let key in dailyValues) {\t\t\t\t\r\n\t\t\t\t\tlet closeValue = parseFloat(dailyValues[key]['4. close'])\r\n\t\t\t\t\thistory.push({date: this.createEuropeanDate(key), value: closeValue})\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.updateStocks(ticker, amount, close, history)\r\n\t\t\t})\r\n\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\t\r\n\t\t\t})\r\n\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\tcreateEuropeanDate = (dateString) => {\r\n\t\tlet date = new Date(dateString)\r\n\t\treturn date.getDate() + \"/\" + (date.getMonth() + 1) + \"/\"+date.getFullYear();\r\n\t}\r\n\r\n\tupdateStocks = (ticker, amount, closeValue, history) => {\r\n\r\n\t\t//If stock already exists in portfolio, update it's amount and value\r\n\t\t//Otherwise add it entirely\r\n\t\tlet stocks = this.state.stocks\r\n\t\tlet alreadyExists = false\r\n\r\n\t\tstocks.forEach((stock, index) => {\r\n\t\t\tif(stock.ticker === ticker) {\r\n\t\t\t\talreadyExists = true\r\n\t\t\t\tstocks[index].closeValue = closeValue\r\n\t\t\t\tstocks[index].amount += amount\r\n\t\t\t\tstocks[index].value = stocks[index].amount * closeValue\r\n\t\t\t\tstocks[index].history = history.reverse()\r\n\t\t\t\tthis.setState(() => ({\r\n\t\t\t\t\tstocks: stocks\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t})\r\n\t\t\r\n\t\t//If stock doesn't already exist in portfolio\r\n\t\tif(!alreadyExists){\r\n\t\t\tthis.setState(prevState => ({\r\n\t\t\t\tstocks: [...prevState.stocks, {\r\n\t\t\t\t\tticker: ticker,\r\n\t\t\t\t\tcloseValue: closeValue,\r\n\t\t\t\t\tamount: amount,\r\n\t\t\t\t\tvalue: amount * closeValue,\r\n\t\t\t\t\thistory : history.reverse(),\r\n\t\t\t\t\tchecked: false,\r\n\t\t\t\t\tcolor: this.generateRandomHexadecimalColor()\r\n\t\t\t\t}]\r\n\t\t\t}))\t\r\n\t\t}\r\n\r\n\t\t//Update the value of the portfolio when new stocks are added\r\n\t\tlet value = this.calcNewPortfolioValue(this.state.stocks)\r\n\t\tthis.setState({\r\n\t\t\tvalue: value\r\n\t\t})\t\t\r\n\t}\r\n\r\n\t//Return the new portfolio value\r\n\tcalcNewPortfolioValue = (stocksArr) => {\r\n\t\tlet value = 0\r\n\t\tstocksArr.forEach(stock => {\r\n\t\t\tvalue += stock.value\r\n\t\t})\r\n\r\n\t\treturn value\r\n\t}\r\n\r\n\t//Switch the modal state between showing and not showing\r\n\tshowAddStockModal = () => {\r\n\t\tthis.setState(({\r\n\t\t\tshowAddStockModal: !this.state.showAddStockModal\r\n\t\t}))\r\n\t}\r\n\r\n\tshowPerfGraphModal = () => {\r\n\t\tthis.setState(({\r\n\t\t\tshowPerfGraphModal : !this.state.showPerfGraphModal\r\n\t\t}))\r\n\t}\r\n\r\n\t//Update marked stocks when user checks a stock in the table\r\n\t//Sent as a \"callback\" to the StocksTable component\r\n\thandleCheckedStocks = indicies => {\r\n\t\tlet updatedStockArr = this.state.stocks\r\n\r\n\t\tupdatedStockArr.forEach((_, index) => {\r\n\t\t\t\r\n\t\t\tif(indicies.includes(index)) {\t\r\n\t\t\t\tupdatedStockArr[index].checked = true\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tupdatedStockArr[index].checked = false\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t\tthis.setState({\r\n\t\t\tstocks: updatedStockArr\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\t//Check if atleast one stock is checked\r\n\t//Used to determine whether graph and delete buttons are disabled or not\r\n\tanyStocksChecked = () => {\r\n\t\tfor (let i = 0; i < this.state.stocks.length; i++) {\r\n\t\t\tif(this.state.stocks[i].checked === true) return true\t\t\t\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\t//Get all checked/selected stocks, sent as prop to StocksTable\r\n\tgetSelectedRows = () => {\r\n\t\tlet rows = []\r\n\t\tthis.state.stocks.forEach((stock, index) => {\r\n\t\t\tif(stock.checked === true){\r\n\t\t\t\trows.push(index)\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn rows\r\n\t}\r\n\r\n\r\n\t//Remove all selected stocks\r\n\tdeleteStocks = () => {\r\n\t\tlet updatedStocks = this.state.stocks.filter(stock => {\r\n\t\t\treturn !stock.checked\r\n\t\t})\r\n\r\n\t\tlet value = this.calcNewPortfolioValue(updatedStocks)\r\n\t\tthis.setState({\r\n\t\t\tstocks: updatedStocks,\r\n\t\t\tvalue: value\r\n\t\t})\r\n\t}\r\n\r\n\t//When user changes currency\r\n\thandleCurrencyChange = (e) => {\r\n\t\tlet exchangeRate, currency\r\n\r\n\t\tif(e.target.value === '$'){\r\n\t\t\texchangeRate = 1\r\n\t\t\tcurrency = '$'\r\n\t\t}\r\n\t\telse if (e.target.value === '€'){\r\n\t\t\texchangeRate = this.props.euroExchangeRate\r\n\t\t\tcurrency = '€'\r\n\t\t}\r\n\r\n\t\t//This will trigger a rerender with the values in the selected currency\r\n\t\tthis.setState({\r\n\t\t\tcurrentExchangeRate: exchangeRate,\r\n\t\t\tcurrency: currency\r\n\t\t})\r\n\t}\r\n\r\n\t//Sent to the graph modal component\r\n\tgetStartAndEndHistoryDates = () => {\r\n\t\tif(this.state.stocks.length >= 1) {\r\n\t\t\tlet len = this.state.stocks[0].history.length\r\n\t\t\tlet start = this.state.stocks[0].history[0]['date']\r\n\t\t\tlet end = this.state.stocks[0].history[len-1]['date']\r\n\t\t\treturn [start, end]\r\n\t\t}\r\n\r\n\t\treturn null\r\n\t}\r\n\r\n\t//For generating the graph colors for each stock\r\n\tgenerateRandomHexadecimalColor = () => {\r\n\t\treturn \"#\" + Math.random().toString(16).slice(2, 8)\r\n\t}\r\n\r\n} // end of Portfolio\r\n\r\n\r\nPortfolio.propTypes = {\r\n\tname: PropTypes.string.isRequired,\r\n\tonRemove: PropTypes.func.isRequired,\r\n\teuroExchangeRate: PropTypes.number.isRequired,\r\n}","import React from 'react'\r\nimport Portfolio from './Portfolio'\r\nimport {Button, Row, Col} from 'antd'\r\nimport SimpleStorage from \"react-simple-storage\";\r\nimport { v4 } from 'uuid';\r\n\r\n\r\nexport default class PortfolioContainer extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tportfolios: [],\r\n\t\t\teuroExchangeRate: null\r\n\t\t}\r\n\t}\r\n\r\n\t//fetch the euro exchange rate\r\n\tcomponentDidMount() {\r\n\t\tthis.getCurrencyExchangeRates()\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"portfolio-container\">\r\n\t\t\t\t{/* For local storage */}\r\n\t\t\t\t<SimpleStorage parent={this} />\r\n\r\n\t\t\t\t<Button id=\"add-portfolio-button\"\r\n\t\t\t\t\t\ttype=\"primary\"\r\n\t\t\t\t\t\tonClick={this.createNewPortfolio}\r\n\t\t\t\t>\r\n\t\t\t\tAdd new portfolio\r\n\t\t\t\t</Button>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32, xl: 40 }} type=\"flex\" justify=\"center\" align=\"middle\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.state.portfolios.map(item => (\r\n\t\t\t\t\t\t\t<Col key={item.id} xs={24} sm={24} md={24} lg={12} xl={10}>\r\n\t\t\t\t\t\t\t\t<Portfolio\r\n\t\t\t\t\t\t\t\t\tname={item.name}\r\n\t\t\t\t\t\t\t\t\tonRemove={this.removePortfolio}  \r\n\t\t\t\t\t\t\t\t\tid={item.id}\r\n\t\t\t\t\t\t\t\t\teuroExchangeRate={this.state.euroExchangeRate}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tcreateNewPortfolio = () => {\r\n\r\n\t\tif(this.state.portfolios.length === 10) {\r\n\t\t\talert(\"You can't create more than 10 portfolios\")\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet portfolioName = \"\"\r\n\t\twhile(portfolioName === \"\"){\r\n\t\t\tportfolioName = prompt(\"Please enter the name of the portfolio\")\r\n\t\t}\r\n\t\t\r\n\t\tif(portfolioName === null) return\t// user clicks cancel\r\n\t\tlet portfolio = {\r\n\t\t\tname: portfolioName,\r\n\t\t\tid: v4()\r\n\t\t}\r\n\r\n\t\tlet exists = false\r\n\t\t//Check if portfolio with same name already exists\r\n\t\tthis.state.portfolios.forEach(portfolio => {\r\n\t\t\tif(portfolio.name === portfolioName){\r\n\t\t\t\talert(\"A portfolio with the same name already exists. Please give another name.\")\r\n\t\t\t\texists = true\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\t//Don't add portfolio\r\n\t\tif(exists) return\r\n\t\t\r\n\t\tthis.setState(prevState => ({\r\n\t\t\tportfolios: [...prevState.portfolios, portfolio]\r\n\t\t}))\r\n\t}\r\n\r\n\tremovePortfolio = (portfolioId) => {\r\n\t\tlet newArr = this.state.portfolios.filter(portfolio => portfolioId !== portfolio.id)\r\n\r\n\t\t// Update state\r\n\t\tthis.setState({ portfolios: newArr })\r\n\t}\r\n\r\n\t// Stock API returns in USD, get the exchange rate (USD*exrate) = EUR\r\n\tgetCurrencyExchangeRates = () => {\r\n\t\tfetch('https://api.exchangeratesapi.io/latest?symbols=USD')\r\n\t\t\t.then((response) => {\r\n\t\t\t\treturn response.json()\r\n\t\t\t})\r\n\r\n\t\t\t.then((json) => {\r\n\t\t\t\tthis.setState(({\r\n\t\t\t\t\teuroExchangeRate: (1 / parseFloat(json.rates.USD))\r\n\t\t\t\t}))\r\n\t\t\t})\r\n\t\t}\r\n}","import React from 'react'\r\nimport PortfolioContainer from './Components/PortfolioContainer'\r\nimport {Layout} from 'antd'\r\nconst {Header, Content} = Layout\r\n\r\nconst App = () => {\r\n    return(\r\n        <div>\r\n            <Layout id=\"layout\">\r\n                <Header id=\"main-header\">\r\n                    <h1 id=\"main-header-text\">SPMS</h1>\r\n                </Header>\r\n                <Content id=\"main-content\">\r\n                    <PortfolioContainer></PortfolioContainer>\r\n                </Content>\r\n            </Layout>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport \"antd/dist/antd.css\";\r\nimport './index.css'\r\nimport App from './App'\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}